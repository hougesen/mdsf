{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MdsfConfig",
  "type": "object",
  "properties": {
    "$schema": {
      "default": "https://raw.githubusercontent.com/hougesen/mdsf/main/schemas/v0.2.7/mdsf.schema.json",
      "type": "string"
    },
    "custom_file_extensions": {
      "description": "Used for settings custom file extensions for a given language. ```json { \"custom_file_extensions\": { \"rust\": \".rust\" } } ```",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "format_finished_document": {
      "description": "Format the processed document with the selected markdown formatter.",
      "default": false,
      "type": "boolean"
    },
    "javascript_runtime": {
      "description": "Set npm script runner runtime.\n\nShould be considered experimental since not all tools support being run using Bun/Deno.\n\n`node -> npx`\n\n`bun -> bunx`\n\n`deno -> deno run`",
      "default": "node",
      "allOf": [
        {
          "$ref": "#/definitions/JavaScriptRuntime"
        }
      ]
    },
    "languages": {
      "description": "Defines which formatter is used by the language. ```json { \"languages\": { \"rust\": \"rustfmt\", \"js\": \"prettier\" } } ```",
      "default": {},
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/MdsfFormatter_for_Tooling"
      }
    }
  },
  "definitions": {
    "JavaScriptRuntime": {
      "type": "string",
      "enum": ["bun", "deno", "node", "pnpm"]
    },
    "MdsfFormatter_for_Tooling": {
      "anyOf": [
        {
          "$ref": "#/definitions/Tooling"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MdsfFormatter_for_Tooling"
          }
        }
      ]
    },
    "Tooling": {
      "oneOf": [
        {
          "description": "The Uncompromising Nix Code Formatter - [https://github.com/kamadorueda/alejandra](https://github.com/kamadorueda/alejandra)",
          "type": "string",
          "enum": ["alejandra"]
        },
        {
          "description": "A static code analysis tool for Crystal - [https://github.com/crystal-ameba/ameba](https://github.com/crystal-ameba/ameba)",
          "type": "string",
          "enum": ["ameba"]
        },
        {
          "description": "Go Assembler Formatter - [https://github.com/klauspost/asmfmt](https://github.com/klauspost/asmfmt)",
          "type": "string",
          "enum": ["asmfmt"]
        },
        {
          "description": "A Free, Fast, and Small Automatic Formatter for C, C++, C++/CLI, Objective-C, C#, and Java Source Code - [https://gitlab.com/saalen/astyle](https://gitlab.com/saalen/astyle)",
          "type": "string",
          "enum": ["astyle"]
        },
        {
          "description": "Adds the Optional type-hint to arguments where the default value is None - [https://pypi.org/project/auto-optional/](https://pypi.org/project/auto-optional/)",
          "type": "string",
          "enum": ["auto_optional"]
        },
        {
          "description": "A linter and formatter to help you to improve copywriting, correct spaces, words, and punctuations between CJK (Chinese, Japanese, Korean) - [https://github.com/huacnlee/autocorrect](https://github.com/huacnlee/autocorrect)",
          "type": "string",
          "enum": ["autocorrect"]
        },
        {
          "description": "Removes unused imports and unused variables as reported by pyflakes - [https://github.com/pycqa/autoflake](https://github.com/pycqa/autoflake)",
          "type": "string",
          "enum": ["autoflake"]
        },
        {
          "description": "A tool that automatically formats Python code to conform to the PEP 8 style guid - [https://pypi.org/project/autopep8/](https://pypi.org/project/autopep8/)",
          "type": "string",
          "enum": ["autopep_8"]
        },
        {
          "description": "Opinionated code formatter, just like Python's black code formatter but for Beancount - [https://github.com/LaunchPlatform/beancount-black](https://github.com/LaunchPlatform/beancount-black)",
          "type": "string",
          "enum": ["bean_black"]
        },
        {
          "description": "A Bash beautifier for the masses - [https://pypi.org/project/beautysh/](https://pypi.org/project/beautysh/)",
          "type": "string",
          "enum": ["beautysh"]
        },
        {
          "description": "Bicep is a declarative language for describing and deploying Azure resources - [https://github.com/Azure/bicep](https://github.com/Azure/bicep)",
          "type": "string",
          "enum": ["bicep_format"]
        },
        {
          "description": "One toolchain for your web project - [https://biomejs.dev/](https://biomejs.dev/)",
          "type": "string",
          "enum": ["biome_check"]
        },
        {
          "description": "One toolchain for your web project - [https://biomejs.dev/](https://biomejs.dev/)",
          "type": "string",
          "enum": ["biome_format"]
        },
        {
          "description": "One toolchain for your web project - [https://biomejs.dev/](https://biomejs.dev/)",
          "type": "string",
          "enum": ["biome_lint"]
        },
        {
          "description": "The uncompromising Python code formatter - [https://github.com/psf/black](https://github.com/psf/black)",
          "type": "string",
          "enum": ["black"]
        },
        {
          "description": "An opinionated blade template formatter for Laravel that respects readability - [https://github.com/shufo/blade-formatter](https://github.com/shufo/blade-formatter)",
          "type": "string",
          "enum": ["blade_formatter"]
        },
        {
          "description": "The slightly less uncompromising Python code formatter - [https://blue.readthedocs.io/en/latest/](https://blue.readthedocs.io/en/latest/)",
          "type": "string",
          "enum": ["blue"]
        },
        {
          "description": "A formatter for Blueprint files - [https://source.android.com/docs/setup/reference/androidbp#formatter](https://source.android.com/docs/setup/reference/androidbp#formatter)",
          "type": "string",
          "enum": ["bpfmt"]
        },
        {
          "description": "A Haskell source code formatter - [https://github.com/lspitzner/brittany](https://github.com/lspitzner/brittany)",
          "type": "string",
          "enum": ["brittany"]
        },
        {
          "description": "A best practice Python code formatter - [https://github.com/odwyersoftware/brunette](https://github.com/odwyersoftware/brunette)",
          "type": "string",
          "enum": ["brunette"]
        },
        {
          "description": "A code formatter for BrightScript and BrighterScript - [https://github.com/rokucommunity/brighterscript-formatter](https://github.com/rokucommunity/brighterscript-formatter)",
          "type": "string",
          "enum": ["bsfmt"]
        },
        {
          "description": "The best way of working with Protocol Buffers - [https://buf.build/docs/reference/cli/buf/format/](https://buf.build/docs/reference/cli/buf/format/)",
          "type": "string",
          "enum": ["buf"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["buildifier"]
        },
        {
          "description": "Cabal is a system for building and packaging Haskell libraries and programs - [https://www.haskell.org/cabal/](https://www.haskell.org/cabal/)",
          "type": "string",
          "enum": ["cabal_format"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["caramel_fmt"]
        },
        {
          "description": "A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code - [https://clang.llvm.org/docs/ClangFormat.html](https://clang.llvm.org/docs/ClangFormat.html)",
          "type": "string",
          "enum": ["clang_format"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["clang_tidy"]
        },
        {
          "description": "A tool for formatting Clojure code - [https://github.com/weavejester/cljfmt](https://github.com/weavejester/cljfmt)",
          "type": "string",
          "enum": ["cljfmt"]
        },
        {
          "description": "A tool for formatting Clojure code - [https://github.com/greglook/cljstyle](https://github.com/greglook/cljstyle)",
          "type": "string",
          "enum": ["cljstyle"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["codespell"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["crlfmt"]
        },
        {
          "description": "Tools for the Crystal programming language - [https://crystal-lang.org/](https://crystal-lang.org/)",
          "type": "string",
          "enum": ["crystal_format"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["css_beautify"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["csscomb"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["d_2"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["dart_fix"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["dart_format"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["dcm_fix"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["dcm_format"]
        },
        {
          "description": "Formatter and linter for JavaScript and TypeScript - [https://docs.deno.com/runtime/reference/cli/](https://docs.deno.com/runtime/reference/cli/)",
          "type": "string",
          "enum": ["deno_fmt"]
        },
        {
          "description": "Formatter and linter for JavaScript and TypeScript - [https://docs.deno.com/runtime/reference/cli/](https://docs.deno.com/runtime/reference/cli/)",
          "type": "string",
          "enum": ["deno_lint"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["dfmt"]
        },
        {
          "description": "Format Dhall files - [https://dhall-lang.org/](https://dhall-lang.org/)",
          "type": "string",
          "enum": ["dhall"]
        },
        {
          "description": "Lint & Format HTML Templates - [https://www.djlint.com/](https://www.djlint.com/)",
          "type": "string",
          "enum": ["djlint"]
        },
        {
          "description": "Formats docstrings to follow PEP 257 - [https://pypi.org/project/docformatter/](https://pypi.org/project/docformatter/)",
          "type": "string",
          "enum": ["docformatter"]
        },
        {
          "description": "A formatter for Sphinx flavored reStructuredText - [https://pypi.org/project/docstrfmt/](https://pypi.org/project/docstrfmt/)",
          "type": "string",
          "enum": ["docstrfmt"]
        },
        {
          "description": "Lightning-fast linter for .env files - [https://github.com/dotenv-linter/dotenv-linter](https://github.com/dotenv-linter/dotenv-linter)",
          "type": "string",
          "enum": ["dotenv_linter"]
        },
        {
          "description": "An Opinionated Code Formatter for C# - [https://csharpier.com/](https://csharpier.com/)",
          "type": "string",
          "enum": ["dotnet"]
        },
        {
          "description": "A pluggable and configurable code formatting platform written in Rust - [https://dprint.dev/](https://dprint.dev/)",
          "type": "string",
          "enum": ["dprint"]
        },
        {
          "description": "The Easiest way to add coding standard to your PHP project - [https://github.com/easy-coding-standard/easy-coding-standard](https://github.com/easy-coding-standard/easy-coding-standard)",
          "type": "string",
          "enum": ["easy_coding_standard"]
        },
        {
          "description": "Erlang code formatter - [https://github.com/sile/efmt](https://github.com/sile/efmt)",
          "type": "string",
          "enum": ["efmt"]
        },
        {
          "description": "elm-format formats Elm source code according to a standard set of rules based on the official Elm Style Guide - [https://github.com/avh4/elm-format](https://github.com/avh4/elm-format)",
          "type": "string",
          "enum": ["elm_format"]
        },
        {
          "description": "Find and fix problems in your JavaScript code - [https://github.com/eslint/eslint/](https://github.com/eslint/eslint/)",
          "type": "string",
          "enum": ["eslint"]
        },
        {
          "description": "A formatter to make your CMake code the real treasure - [https://github.com/blankspruce/gersemi](https://github.com/blankspruce/gersemi)",
          "type": "string",
          "enum": ["gersemi"]
        },
        {
          "description": "Tool for writing clean and consistent HAML - [https://github.com/sds/haml-lint](https://github.com/sds/haml-lint)",
          "type": "string",
          "enum": ["haml_lint"]
        },
        {
          "description": "Prettier is an opinionated code formatter - [https://github.com/prettier/prettier](https://github.com/prettier/prettier)",
          "type": "string",
          "enum": ["prettier"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["yapf"]
        },
        {
          "description": "- []()",
          "type": "string",
          "enum": ["yew_fmt"]
        },
        {
          "description": "Reformat Zig source into canonical form - [https://ziglang.org/](https://ziglang.org/)",
          "type": "string",
          "enum": ["zig"]
        },
        {
          "description": "Formats Ziggy documents and Ziggy schemas - [https://ziggy-lang.io/documentation/ziggy-fmt/](https://ziggy-lang.io/documentation/ziggy-fmt/)",
          "type": "string",
          "enum": ["ziggy"]
        },
        {
          "description": "Executables, uberjar, and library to beautifully format Clojure and Clojurescript source code and s-expressions - [https://github.com/kkinnear/zprint](https://github.com/kkinnear/zprint)",
          "type": "string",
          "enum": ["zprint"]
        }
      ]
    }
  }
}
